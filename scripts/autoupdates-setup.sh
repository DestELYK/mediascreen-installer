#!/bin/bash

# Source common library
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/../lib/common.sh"

<<comment
    This script configures automatic updates and reboots for MediaScreen systems.
    
    The script installs and configures unattended-upgrades, sets up automatic reboots,
    and schedules maintenance windows for optimal system operation.
    
    This script requires root privileges. Please run as root.

    Command Line Usage:
        - Interactive setup:
            sudo ./autoupdates-setup.sh
        - Auto mode with defaults:
            sudo ./autoupdates-setup.sh -y
        - Custom reboot time:
            sudo ./autoupdates-setup.sh --reboot-time="03:00"

    Author: DestELYK
    Date: 07-09-2024
    Updated: 07-21-2025 - Added common library, improved configuration, and scheduling options
comment

# Initialize common functionality
init_common "autoupdates-setup"

# System checks
check_debian
check_root

# Default configuration
DEFAULT_REBOOT_TIME="02:00"
DEFAULT_WEEKLY_REBOOT_DAY="0"  # Sunday

# Parse custom arguments
REBOOT_TIME="$DEFAULT_REBOOT_TIME"
WEEKLY_REBOOT_DAY="$DEFAULT_WEEKLY_REBOOT_DAY"

for arg in "$@"; do
    case $arg in
        --reboot-time=*)
            REBOOT_TIME="${arg#*=}"
            ;;
        --weekly-day=*)
            WEEKLY_REBOOT_DAY="${arg#*=}"
            ;;
        *)
            # Let common library handle other args
            ;;
    esac
done

if ! parse_common_args "$@"; then
    case $? in
        2) 
            echo "Additional options:"
            echo "  --reboot-time=TIME    Set automatic reboot time (default: $DEFAULT_REBOOT_TIME)"
            echo "  --weekly-day=DAY      Set weekly reboot day (0=Sunday, 1=Monday, etc.)"
            exit 0
            ;;
        *) 
            # Continue execution even if common args parsing had issues
            log_debug "parse_common_args returned non-zero, continuing anyway"
            ;;
    esac
fi

# Validate time format
validate_time() {
    local time="$1"
    
    if [[ ! $time =~ ^([01]?[0-9]|2[0-3]):[0-5][0-9]$ ]]; then
        log_error "Invalid time format: $time. Use HH:MM format (24-hour)"
        return 1
    fi
    
    return 0
}

# Validate day of week
validate_day() {
    local day="$1"
    
    if [[ ! $day =~ ^[0-6]$ ]]; then
        log_error "Invalid day: $day. Use 0-6 (0=Sunday, 1=Monday, etc.)"
        return 1
    fi
    
    return 0
}

# Install required packages
install_update_packages() {
    log_info "Installing automatic update packages..."
    
    update_package_cache || {
        log_error "Failed to update package cache"
        return 1
    }
    
    local packages=(
        "unattended-upgrades"
        "apt-listchanges"
    )
    
    for package in "${packages[@]}"; do
        install_package "$package" || {
            log_error "Failed to install $package"
            return 1
        }
    done
    
    log_info "Update packages installed successfully"
}

# Configure unattended upgrades
configure_unattended_upgrades() {
    local config_file="/etc/apt/apt.conf.d/50unattended-upgrades"
    
    log_info "Configuring unattended upgrades..."
    
    # Backup existing configuration
    if [[ -f "$config_file" ]]; then
        backup_file "$config_file"
    fi
    
    # Create comprehensive unattended-upgrades configuration
    cat > "$config_file" << EOF
// MediaScreen Unattended Upgrades Configuration
// Generated by autoupdates-setup.sh on $(date)

// Automatically upgrade packages from these origins
Unattended-Upgrade::Allowed-Origins {
    "\${distro_id}:\${distro_codename}-security";
    "\${distro_id}ESMApps:\${distro_codename}-apps-security";
    "\${distro_id}ESM:\${distro_codename}-infra-security";
};

// List of packages to not update (regexp are supported)
Unattended-Upgrade::Package-Blacklist {
    // Exclude kernel updates to prevent compatibility issues
    "linux-.*";
    ".*-kernel-.*";
};

// Automatically reboot if required packages were updated
Unattended-Upgrade::Automatic-Reboot "true";

// Reboot time (in 24h format)
Unattended-Upgrade::Automatic-Reboot-Time "$REBOOT_TIME";

// Automatically remove unused dependencies
Unattended-Upgrade::Remove-Unused-Dependencies "true";

// Automatically remove new unused dependencies after the upgrade
Unattended-Upgrade::Remove-New-Unused-Dependencies "true";

// Remove unused kernel packages
Unattended-Upgrade::Remove-Unused-Kernel-Packages "true";

// Send email on errors (requires mail setup)
// Unattended-Upgrade::Mail "admin@example.com";

// Only send mail on errors
Unattended-Upgrade::MailOnlyOnError "true";

// Enable logging
Unattended-Upgrade::SyslogEnable "true";
Unattended-Upgrade::SyslogFacility "daemon";

// Verbose logging
Unattended-Upgrade::Verbose "false";
Unattended-Upgrade::Debug "false";
EOF
    
    log_info "Unattended upgrades configuration created"
}

# Configure automatic updates scheduling
configure_auto_upgrades() {
    local config_file="/etc/apt/apt.conf.d/20auto-upgrades"
    
    log_info "Configuring automatic update scheduling..."
    
    # Backup existing configuration
    if [[ -f "$config_file" ]]; then
        backup_file "$config_file"
    fi
    
    # Create auto-upgrades configuration
    cat > "$config_file" << EOF
// MediaScreen Automatic Updates Configuration
// Generated by autoupdates-setup.sh on $(date)

// Update package lists automatically (daily)
APT::Periodic::Update-Package-Lists "1";

// Download upgradeable packages automatically (daily)
APT::Periodic::Download-Upgradeable-Packages "1";

// Install security upgrades automatically (daily)
APT::Periodic::Unattended-Upgrade "1";

// Clean local download archive (weekly)
APT::Periodic::AutocleanInterval "7";

// Verbose logging for debugging
APT::Periodic::Verbose "0";
EOF
    
    log_info "Automatic update scheduling configured"
}

# Set up weekly reboot schedule
configure_weekly_reboot() {
    local cron_file="/etc/cron.d/mediascreen-reboot"
    
    log_info "Configuring weekly reboot schedule..."
    
    # Validate inputs
    validate_time "$REBOOT_TIME" || return 1
    validate_day "$WEEKLY_REBOOT_DAY" || return 1
    
    # Extract hour and minute
    local hour=$(echo "$REBOOT_TIME" | cut -d':' -f1)
    local minute=$(echo "$REBOOT_TIME" | cut -d':' -f2)
    
    # Create cron job for weekly reboot
    cat > "$cron_file" << EOF
# MediaScreen Weekly Reboot Schedule
# Generated by autoupdates-setup.sh on $(date)
# Reboot every week on day $WEEKLY_REBOOT_DAY at $REBOOT_TIME

$minute $hour * * $WEEKLY_REBOOT_DAY root /sbin/shutdown -r +1 "Weekly maintenance reboot in 1 minute"
EOF
    
    # Set proper permissions
    chmod 644 "$cron_file"
    
    # Convert day number to name for logging
    local day_names=("Sunday" "Monday" "Tuesday" "Wednesday" "Thursday" "Friday" "Saturday")
    local day_name="${day_names[$WEEKLY_REBOOT_DAY]}"
    
    log_info "Weekly reboot scheduled for ${day_name}s at $REBOOT_TIME"
}

# Enable and start required services
configure_services() {
    log_info "Configuring automatic update services..."
    
    # Enable unattended-upgrades
    systemctl enable unattended-upgrades || {
        log_warn "Failed to enable unattended-upgrades service"
    }
    
    # Start unattended-upgrades
    systemctl start unattended-upgrades || {
        log_warn "Failed to start unattended-upgrades service"
    }
    
    # Enable and restart cron
    systemctl enable cron || {
        log_warn "Failed to enable cron service"
    }
    
    systemctl restart cron || {
        log_warn "Failed to restart cron service"
    }
    
    log_info "Services configured successfully"
}

# Test configuration
test_configuration() {
    log_info "Testing automatic updates configuration..."
    
    # Check unattended-upgrades service
    if systemctl is-active --quiet unattended-upgrades; then
        log_info "Unattended-upgrades service is active"
    else
        log_warn "Unattended-upgrades service is not active"
    fi
    
    # Check configuration files
    if [[ -f "/etc/apt/apt.conf.d/50unattended-upgrades" ]]; then
        log_info "Unattended-upgrades configuration exists"
    else
        log_error "Unattended-upgrades configuration missing"
        return 1
    fi
    
    if [[ -f "/etc/apt/apt.conf.d/20auto-upgrades" ]]; then
        log_info "Auto-upgrades configuration exists"
    else
        log_error "Auto-upgrades configuration missing"
        return 1
    fi
    
    # Test dry run
    log_info "Performing dry run of unattended upgrades..."
    if unattended-upgrade --dry-run >/dev/null 2>&1; then
        log_info "Unattended upgrades dry run successful"
    else
        log_warn "Unattended upgrades dry run had issues"
    fi
    
    return 0
}

# Main execution
main() {
    log_info "Starting automatic updates and reboot configuration..."
    
    # Validate custom parameters
    if ! validate_time "$REBOOT_TIME"; then
        report_failure "Invalid reboot time format"
    fi
    
    if ! validate_day "$WEEKLY_REBOOT_DAY"; then
        report_failure "Invalid weekly reboot day"
    fi
    
    if [[ "$AUTO_INSTALL" != "true" ]]; then
        echo
        echo "This script will configure:"
        echo "- Automatic security updates"
        echo "- Automatic reboots when required (at $REBOOT_TIME)"
        echo "- Weekly maintenance reboots"
        echo "- Package cleanup and maintenance"
        echo
        
        if ! prompt_yes_no "Continue with automatic updates configuration?" "y"; then
            log_info "Automatic updates configuration cancelled by user"
            exit 0
        fi
    fi
    
    # Install required packages
    install_update_packages || report_failure "Package installation"
    
    # Configure unattended upgrades
    configure_unattended_upgrades || report_failure "Unattended upgrades configuration"
    
    # Configure automatic updates
    configure_auto_upgrades || report_failure "Auto-upgrades configuration"
    
    # Configure weekly reboot
    configure_weekly_reboot || report_failure "Weekly reboot configuration"
    
    # Configure services
    configure_services || log_warn "Service configuration had issues"
    
    # Test configuration
    test_configuration || log_warn "Configuration test had issues"
    
    report_success "Automatic updates and reboot configuration"
    
    if [[ "$AUTO_INSTALL" != "true" ]]; then
        echo
        echo "Automatic updates configuration completed successfully!"
        echo "- Security updates will be installed automatically"
        echo "- System will reboot automatically when required (at $REBOOT_TIME)"
        
        local day_names=("Sunday" "Monday" "Tuesday" "Wednesday" "Thursday" "Friday" "Saturday")
        echo "- Weekly maintenance reboot: ${day_names[$WEEKLY_REBOOT_DAY]}s at $REBOOT_TIME"
        
        echo "- Unused packages will be automatically removed"
        echo "- Update logs available in: /var/log/unattended-upgrades/"
        echo
        echo "To check update status: sudo unattended-upgrade --dry-run"
        echo "To view logs: sudo journalctl -u unattended-upgrades"
        echo
    fi
}

# Run main function
main