#!/bin/bash

# Source common library
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/../lib/common.sh"

<<comment
    This script configures automatic reboot scheduling for MediaScreen systems.
    
    The script sets up cron jobs for regular system reboots to ensure optimal
    performance and apply updates that require restarts.
    
    This script requires root privileges. Please run as root.

    Command Line Usage:
        - Interactive setup:
            sudo ./reboot-setup.sh
        - Auto mode with defaults (Sunday 2:00 AM):
            sudo ./reboot-setup.sh -y
        - Custom schedule:
            sudo ./reboot-setup.sh --time="03:00" --day="1"

    Author: DestELYK
    Date: 07-09-2024
    Updated: 07-21-2025 - Added common library, improved scheduling, and configuration options
comment

# Initialize common functionality
init_common "reboot-setup"

# System checks
check_debian
check_root

# Default configuration
DEFAULT_REBOOT_TIME="02:00"
DEFAULT_REBOOT_DAY="0"  # Sunday

# Parse custom arguments
REBOOT_TIME="$DEFAULT_REBOOT_TIME"
REBOOT_DAY="$DEFAULT_REBOOT_DAY"

for arg in "$@"; do
    case $arg in
        --time=*)
            REBOOT_TIME="${arg#*=}"
            ;;
        --day=*)
            REBOOT_DAY="${arg#*=}"
            ;;
        *)
            # Let common library handle other args
            ;;
    esac
done

if ! parse_common_args "$@"; then
    case $? in
        2) 
            echo "Additional options:"
            echo "  --time=TIME    Set reboot time in HH:MM format (default: $DEFAULT_REBOOT_TIME)"
            echo "  --day=DAY      Set reboot day (0=Sunday, 1=Monday, etc., default: $DEFAULT_REBOOT_DAY)"
            exit 0
            ;;
        *) 
            # Continue execution even if common args parsing had issues
            log_debug "parse_common_args returned non-zero, continuing anyway"
            ;;
    esac
fi

# Validate time format (HH:MM)
validate_time() {
    local time="$1"
    
    if [[ ! $time =~ ^([01]?[0-9]|2[0-3]):[0-5][0-9]$ ]]; then
        log_error "Invalid time format: $time. Use HH:MM format (24-hour)"
        return 1
    fi
    
    return 0
}

# Validate day of week (0-6)
validate_day() {
    local day="$1"
    
    if [[ ! $day =~ ^[0-6]$ ]]; then
        log_error "Invalid day: $day. Use 0-6 (0=Sunday, 1=Monday, etc.)"
        return 1
    fi
    
    return 0
}

# Get current reboot schedule
get_current_schedule() {
    log_info "Checking current reboot schedule..."
    
    # Check system cron files
    if [[ -f "/etc/cron.d/mediascreen-reboot" ]]; then
        log_info "Found existing MediaScreen reboot schedule:"
        cat "/etc/cron.d/mediascreen-reboot" | grep -v '^#' | grep -v '^$'
    fi
    
    # Check root crontab
    if crontab -l 2>/dev/null | grep -q 'shutdown.*-r'; then
        log_info "Found existing reboot entries in root crontab:"
        crontab -l 2>/dev/null | grep 'shutdown.*-r'
    fi
}

# Remove existing reboot schedules
remove_existing_schedules() {
    log_info "Removing existing reboot schedules..."
    
    # Remove MediaScreen cron file
    if [[ -f "/etc/cron.d/mediascreen-reboot" ]]; then
        backup_file "/etc/cron.d/mediascreen-reboot"
        rm -f "/etc/cron.d/mediascreen-reboot"
        log_info "Removed existing MediaScreen reboot schedule"
    fi
    
    # Clean up root crontab
    if crontab -l 2>/dev/null | grep -q 'shutdown.*-r'; then
        log_info "Backing up and cleaning root crontab..."
        
        # Create backup
        crontab -l > "$TEMP_DIR/root-cron.backup" 2>/dev/null || true
        
        # Remove reboot entries
        crontab -l 2>/dev/null | grep -v 'shutdown.*-r' > "$TEMP_DIR/root-cron.clean" || true
        
        # Install cleaned crontab
        crontab "$TEMP_DIR/root-cron.clean"
        
        log_info "Cleaned reboot entries from root crontab"
    fi
}

# Create new reboot schedule
create_reboot_schedule() {
    local time="$1"
    local day="$2"
    
    log_info "Creating new reboot schedule: ${day} at ${time}"
    
    # Validate inputs
    validate_time "$time" || return 1
    validate_day "$day" || return 1
    
    # Extract hour and minute
    local hour=$(echo "$time" | cut -d':' -f1)
    local minute=$(echo "$time" | cut -d':' -f2)
    
    # Create cron file
    local cron_file="/etc/cron.d/mediascreen-reboot"
    
    cat > "$cron_file" << EOF
# MediaScreen Automatic Reboot Schedule
# Generated by reboot-setup.sh on $(date)
#
# This job reboots the system weekly for maintenance
# Day: $day (0=Sunday, 1=Monday, etc.)
# Time: $time (24-hour format)

# Weekly reboot with 1 minute warning
$minute $hour * * $day root /sbin/shutdown -r +1 "Scheduled maintenance reboot in 1 minute. Please save your work."
EOF
    
    # Set proper permissions
    chmod 644 "$cron_file"
    
    # Convert day number to name for logging
    local day_names=("Sunday" "Monday" "Tuesday" "Wednesday" "Thursday" "Friday" "Saturday")
    local day_name="${day_names[$day]}"
    
    log_info "Reboot schedule created: ${day_name}s at $time"
    
    return 0
}

# Test cron configuration
test_cron() {
    log_info "Testing cron configuration..."
    
    # Check if cron is running
    if systemctl is-active --quiet cron; then
        log_info "Cron service is active"
    else
        log_warn "Cron service is not active, attempting to start..."
        systemctl start cron || {
            log_error "Failed to start cron service"
            return 1
        }
    fi
    
    # Check if our cron file exists and is readable
    if [[ -f "/etc/cron.d/mediascreen-reboot" ]]; then
        log_info "Reboot schedule file exists"
        
        # Validate cron syntax
        if cron -T 2>/dev/null; then
            log_info "Cron configuration syntax is valid"
        else
            log_warn "Cron configuration may have syntax issues"
        fi
    else
        log_error "Reboot schedule file not found"
        return 1
    fi
    
    return 0
}

# Show schedule information
show_schedule_info() {
    local time="$1"
    local day="$2"
    
    local day_names=("Sunday" "Monday" "Tuesday" "Wednesday" "Thursday" "Friday" "Saturday")
    local day_name="${day_names[$day]}"
    
    echo
    echo "=== Reboot Schedule Information ==="
    echo "Day: $day_name ($day)"
    echo "Time: $time"
    echo "Next reboot: $(date -d "next $day_name $time" 2>/dev/null || echo "Unable to calculate")"
    echo "Warning: System will show 1-minute warning before reboot"
    echo "=================================="
}

# Interactive schedule configuration
configure_interactive() {
    echo
    echo "Current reboot schedule configuration:"
    get_current_schedule
    echo
    
    if ! prompt_yes_no "Would you like to configure a new reboot schedule?" "y"; then
        log_info "Reboot schedule configuration cancelled"
        return 1
    fi
    
    # Get day of week
    echo
    echo "Select day of week for reboot:"
    echo "0) Sunday"
    echo "1) Monday" 
    echo "2) Tuesday"
    echo "3) Wednesday"
    echo "4) Thursday"
    echo "5) Friday"
    echo "6) Saturday"
    echo
    
    while true; do
        read -p "Enter day (0-6, default: $DEFAULT_REBOOT_DAY): " input_day
        
        # Use default if empty
        input_day=${input_day:-$DEFAULT_REBOOT_DAY}
        
        if validate_day "$input_day"; then
            REBOOT_DAY="$input_day"
            break
        fi
        
        echo "Please enter a valid day (0-6)."
    done
    
    # Get time
    echo
    while true; do
        read -p "Enter reboot time in HH:MM format (default: $DEFAULT_REBOOT_TIME): " input_time
        
        # Use default if empty
        input_time=${input_time:-$DEFAULT_REBOOT_TIME}
        
        if validate_time "$input_time"; then
            REBOOT_TIME="$input_time"
            break
        fi
        
        echo "Please enter a valid time in HH:MM format (24-hour)."
    done
    
    return 0
}

# Main execution
main() {
    log_info "Starting reboot schedule configuration..."
    
    # Validate parameters
    if ! validate_time "$REBOOT_TIME"; then
        report_failure "Invalid reboot time format"
    fi
    
    if ! validate_day "$REBOOT_DAY"; then
        report_failure "Invalid reboot day"
    fi
    
    # Interactive mode
    if [[ "$AUTO_INSTALL" != "true" ]]; then
        if ! configure_interactive; then
            exit 0
        fi
    fi
    
    log_info "Configuring reboot schedule for day $REBOOT_DAY at $REBOOT_TIME"
    
    # Show current schedule
    get_current_schedule
    
    # Remove existing schedules
    remove_existing_schedules || log_warn "Issues removing existing schedules"
    
    # Create new schedule
    create_reboot_schedule "$REBOOT_DAY" "$REBOOT_TIME" || report_failure "Creating reboot schedule"
    
    # Test configuration
    test_cron || log_warn "Cron configuration test had issues"
    
    report_success "Reboot schedule configuration"
    
    if [[ "$AUTO_INSTALL" != "true" ]]; then
        show_schedule_info "$REBOOT_TIME" "$REBOOT_DAY"
        
        echo
        echo "Reboot schedule has been configured successfully!"
        echo
        echo "To verify the schedule: sudo crontab -l"
        echo "To view cron logs: sudo journalctl -u cron"
        echo "To disable: sudo rm /etc/cron.d/mediascreen-reboot"
        echo
    fi
}

# Run main function
main